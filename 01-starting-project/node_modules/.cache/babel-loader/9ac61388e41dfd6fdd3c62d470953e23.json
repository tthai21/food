{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React\\\\Food-Order-App-React\\\\01-starting-project\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport classes from './AvailableMeals.module.css';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  // meals was an empty array at start\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(); // useEffect to fetch object from database => return object\n\n  useEffect(() => {\n    // cant use async on useEffect so create async in a nested function\n    const fetchMeals = async () => {\n      // return promise\n      const response = await fetch('https://food-order-app-react-9a98e-default-rtdb.asia-southeast1.firebasedatabase.app/meals.');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong');\n      } // convert to a json object\n\n\n      const responseData = await response.json(); // for loop and push single object to an array\n\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      } //useState update meals + finished loading\n\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    };\n\n    try {\n      fetchMeals();\n    } catch (error) {\n      setIsLoading(false);\n      setHttpError(error.message);\n    }\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loaing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (httpError) {\n    return;\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"6pndJp/WWpMtmhSnoCH9k0tFnXc=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"names":["Card","MealItem","classes","useEffect","useState","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","fetch","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","error","message","MealsLoading","mealsList","map","meal"],"sources":["C:/Users/user/Desktop/React/Food-Order-App-React/01-starting-project/src/components/Meals/AvailableMeals.js"],"sourcesContent":["\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport classes from './AvailableMeals.module.css';\nimport { useEffect, useState } from 'react';\n\n\n\nconst AvailableMeals = () => {\n  // meals was an empty array at start\n  const[meals, setMeals] =  useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [httpError, setHttpError] = useState()\n\n// useEffect to fetch object from database => return object\n  useEffect(() =>{\n    // cant use async on useEffect so create async in a nested function\n    const fetchMeals = async()=>{\n      \n      // return promise\n      const response =await fetch('https://food-order-app-react-9a98e-default-rtdb.asia-southeast1.firebasedatabase.app/meals.')\n\n      if(!response.ok){\n        throw new Error('Something went wrong')\n      }\n      // convert to a json object\n      const responseData = await response.json()\n\n      // for loop and push single object to an array\n      const loadedMeals = []      \n      for(const key in responseData){\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        })\n      }\n\n      //useState update meals + finished loading\n      setMeals(loadedMeals)\n      setIsLoading(false)\n\n    };\n    try{\n      fetchMeals()\n    }catch(error){\n      setIsLoading(false)\n      setHttpError(error.message)\n    }\n\n  },[]);\n\n  if(isLoading){\n    return <section className={classes.MealsLoading}>\n      <p>Loaing...</p>\n    </section>\n  }\n\n  if(httpError){\n    return \n  }\n\n  const mealsList = meals.map((meal) => (\n    <MealItem\n      key={meal.id}\n      id={meal.id}\n      name={meal.name}\n      description={meal.description}\n      price={meal.price}\n    />\n  ));\n\n  return (\n    <section className={classes.meals}>\n      <Card>\n        <ul>{mealsList}</ul>\n      </Card>\n    </section>\n  );\n};\n\nexport default AvailableMeals;\n"],"mappings":";;;AACA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAIA,MAAMC,cAAc,GAAG,MAAM;EAAA;;EAC3B;EACA,MAAK,CAACC,KAAD,EAAQC,QAAR,IAAqBH,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,EAA1C,CAJ2B,CAM7B;;EACED,SAAS,CAAC,MAAK;IACb;IACA,MAAMS,UAAU,GAAG,YAAS;MAE1B;MACA,MAAMC,QAAQ,GAAE,MAAMC,KAAK,CAAC,6FAAD,CAA3B;;MAEA,IAAG,CAACD,QAAQ,CAACE,EAAb,EAAgB;QACd,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;MACD,CAPyB,CAQ1B;;;MACA,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B,CAT0B,CAW1B;;MACA,MAAMC,WAAW,GAAG,EAApB;;MACA,KAAI,MAAMC,GAAV,IAAiBH,YAAjB,EAA8B;QAC5BE,WAAW,CAACE,IAAZ,CAAiB;UACfC,EAAE,EAAEF,GADW;UAEfG,IAAI,EAAEN,YAAY,CAACG,GAAD,CAAZ,CAAkBG,IAFT;UAGfC,WAAW,EAAEP,YAAY,CAACG,GAAD,CAAZ,CAAkBI,WAHhB;UAIfC,KAAK,EAAER,YAAY,CAACG,GAAD,CAAZ,CAAkBK;QAJV,CAAjB;MAMD,CApByB,CAsB1B;;;MACAlB,QAAQ,CAACY,WAAD,CAAR;MACAV,YAAY,CAAC,KAAD,CAAZ;IAED,CA1BD;;IA2BA,IAAG;MACDG,UAAU;IACX,CAFD,CAEC,OAAMc,KAAN,EAAY;MACXjB,YAAY,CAAC,KAAD,CAAZ;MACAE,YAAY,CAACe,KAAK,CAACC,OAAP,CAAZ;IACD;EAEF,CApCQ,EAoCP,EApCO,CAAT;;EAsCA,IAAGnB,SAAH,EAAa;IACX,oBAAO;MAAS,SAAS,EAAEN,OAAO,CAAC0B,YAA5B;MAAA,uBACL;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADK;MAAA;MAAA;MAAA;IAAA,QAAP;EAGD;;EAED,IAAGlB,SAAH,EAAa;IACX;EACD;;EAED,MAAMmB,SAAS,GAAGvB,KAAK,CAACwB,GAAN,CAAWC,IAAD,iBAC1B,QAAC,QAAD;IAEE,EAAE,EAAEA,IAAI,CAACT,EAFX;IAGE,IAAI,EAAES,IAAI,CAACR,IAHb;IAIE,WAAW,EAAEQ,IAAI,CAACP,WAJpB;IAKE,KAAK,EAAEO,IAAI,CAACN;EALd,GACOM,IAAI,CAACT,EADZ;IAAA;IAAA;IAAA;EAAA,QADgB,CAAlB;EAUA,oBACE;IAAS,SAAS,EAAEpB,OAAO,CAACI,KAA5B;IAAA,uBACE,QAAC,IAAD;MAAA,uBACE;QAAA,UAAKuB;MAAL;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CAxED;;GAAMxB,c;;KAAAA,c;AA0EN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}